Option Explicit
Sub Clean_TD()
'
' TestTD Macro
'
' Used for cleaning up exported TD file, copying values, and pasting them into portfolio
'
' Keyboard Shortcut: Ctrl+Shift+E
'
    
    Dim TDBook As Workbook
    Dim ClientBook As Workbook
    Dim TDSheet As Worksheet
    Dim BookName As String
    
    StateToggle "Off"
    
    Set TDBook = ActiveWorkbook
    Set TDSheet = ActiveSheet
    TDSheet.PageSetup.FitToPagesTall = False
    
    'Delete extra transactions
    DeleteLines TDBook, TDSheet
    
    'Clean up position values
    CleanMiddle TDSheet
    
    'Copy and paste values
    BookName = BookCheck("Portfolio", "PA")
    If BookName = vbNullString Then
        AddError " Client's file name does not contain ""Portfolio"" or ""PA"". Account values " _
            & "will need to be pasted manually.", False
        SetupPages TDBook, TDSheet
    Else
        Set ClientBook = Workbooks(BookName)
        SetupPages TDBook, TDSheet, ClientBook
        CopyValues TDBook, TDSheet, ClientBook
    End If
    
    AddError vbNullString
    StateToggle "On"
    TDSheet.PrintOut From:=1, To:=1, Preview:=True
End Sub
Function BookCheck(TargetSheet As String, Optional AKASheet As String) As String 'Used to make sure the .csv file is selected and the portfolio is named correctly
    Dim NumberOfWindows As Integer
    Dim i As Integer
    Dim WindowName As String
    
    NumberOfWindows = Windows.Count
    BookCheck = vbNullString

    If AKASheet = vbNullString Then
        AKASheet = "x" * 50
    End If
    
    For i = 1 To NumberOfWindows
        WindowName = Windows(i).Caption
        If InStr(WindowName, TargetSheet) > 0 Or InStr(WindowName, AKASheet) > 0 Then
            BookCheck = Windows(i).Caption
            If Windows(BookCheck).Caption = ActiveWindow.Caption Then
                AddError "Please select the exported .csv file from Veo.", True
            Else: Exit Function
            End If
        End If
    Next i
End Function
Function AddError(Error As String, Optional Display As Boolean) As Integer
    Static ErrorMessage As String
    
    If Error <> vbNullString Then
        ErrorMessage = ErrorMessage & Chr(149) & Error & vbNewLine
        If Display = True Then
            MsgBox (ErrorMessage)
            ErrorMessage = vbNullString
            StateToggle "On"
            End
        End If
    ElseIf Error = vbNullString And ErrorMessage <> vbNullString Then
        MsgBox (ErrorMessage)
        ErrorMessage = vbNullString
    End If
End Function
Sub StateToggle(OnOrOff As String)
    Dim OriginalScreen As Boolean
    Dim OriginalEvents As Boolean
    Dim OriginalStatus As Boolean
    Dim OriginalCalc As XlCalculation
    Dim Reset As Long
    
    If OnOrOff = "Off" Then
        OriginalScreen = Application.ScreenUpdating
        OriginalEvents = Application.EnableEvents
        OriginalStatus = Application.DisplayStatusBar
        OriginalCalc = Application.Calculation
        
        Application.ScreenUpdating = False
        Application.EnableEvents = False
        Application.DisplayStatusBar = False
        Application.Calculation = xlCalculationManual
    ElseIf OnOrOff = "On" Then
        Application.ScreenUpdating = OriginalScreen
        Application.EnableEvents = OriginalEvents
        Application.DisplayStatusBar = OriginalStatus
        Application.Calculation = OriginalCalc
        Reset = ActiveSheet.UsedRange.Rows.Count
    Else: AddError "Compile error - StateToggle is neither on nor off. Macro has been halted.", True
    End If
End Sub
Sub CopyValues(TDBook As Workbook, TDSheet As Worksheet, Optional ClientBook As Workbook)
    If TDSheet.Cells.Find("Client Account", Range("A1"), xlValues, xlPart) Is Nothing Then
        AddError " ""Client Account"" wasn't found. Macro has been halted", True
    End If
    
    Dim CopyPointStart As Range
    Dim CopyPointEnd As Range
    Dim CopySize As Integer
    
    Set CopyPointStart = TDSheet.Cells.Find("Symbol").Offset(1, 0)
    
    If CopyPointStart.Offset(1, 0) = vbNullString Then
        Set CopyPointEnd = CopyPointStart.Offset(0, 1)
    Else
        Set CopyPointEnd = Range(CopyPointStart.End(xlDown).Offset(0, 1).Address)
    End If

    CopySize = Range(CopyPointStart, CopyPointEnd).Rows.Count
    
    'Take the last three numbers of the account number from the TD sheet
    Dim TDAccount As String
    Dim LastThree As String
    Dim CashAlt As Variant
    
    If TDSheet.Cells.Find("Client Account", Range("A1"), xlValues, xlPart) Is Nothing Then
        AddError " ""Client Account"" wasn't found. Macro has been halted", True
    End If
    
    TDAccount = Cells.Find("Client Account", Range("A1"), xlValues, xlPart).Offset(0, 1).Value2
    LastThree = Mid(TDAccount, Len(TDAccount) - 2, 3)
    
    If TDSheet.Cells.Find("Cash Alternatives", Range("A1"), xlValues, xlPart) Is Nothing Then
        AddError " ""Cash Alternatives"" not found. Money market value may not be correct.", False
    Else
        CashAlt = TDSheet.Cells.Find("Cash Alternatives", Range("A1"), xlValues, xlPart).Offset(0, 1).Value2
    End If
    
    'Switch window
    Dim NumberOfWindows As Integer
    Dim Count1 As Integer
    Dim WindowName As String
    Dim MatchedWindowNumber As Integer
    Dim PortCount As Integer
    Dim j As Integer
    Dim Portfolio As Worksheet
    Dim n As Integer
    Dim FullTDType As String
        FullTDType = vbNullString
    Dim PortType As String
        PortType = vbNullString
    Dim DiffTypes() As String
        DiffTypes = Split("Roth 401k,401k,Trust,Joint,72t,Roth IRA,UTMA,TOD,Reg,Individual,Ind,Simple,Bene,SEP,IRA", ",")
    Dim m As Integer
    Dim OverallTDType As String
    
    NumberOfWindows = Windows.Count

    For Count1 = 1 To NumberOfWindows
        WindowName = Windows(Count1).Caption
        If InStr(WindowName, "Portfolio ") > 0 Or InStr(WindowName, "portfolio ") > 0 Or InStr(WindowName, "PA ") > 0 Then
            MatchedWindowNumber = Count1
        End If
    Next Count1

    If MatchedWindowNumber > 0 Then
        Windows(MatchedWindowNumber).Activate
        Set ClientBook = ActiveWorkbook
        PortCount = 0
        
        For j = 1 To Worksheets.Count
            If InStr(Worksheets(j).Name, "portfolio") > 0 Or InStr(Worksheets(j).Name, "Portfolio") > 0 Then
                Set Portfolio = Worksheets(j)
                PortCount = 1
                Exit For
            End If
        Next j
    End If
    
    If PortCount = 0 Then
        AddError " Portfolio tab not named ""Portfolio"". Account values have not been pasted to " _
            & "client's portfolio.", False
    Else
        'Search for cell with "Acct # xxx-xxxyyy", where yyy is these last 3 numbers
        Dim ClientAccount As Range
        
        If Portfolio.UsedRange.Find("Acct # xxx-xxx" & LastThree, Range("A1")) Is Nothing Then
            AddError " Client's account wasn't found on portfolio sheet. Account values were not pasted.", False
        Else
            Set ClientAccount = Portfolio.UsedRange.Find("Acct # xxx-xxx" & LastThree, After:=Range("A1"))
            
            FullTDType = TDSheet.Cells.Find("Client Name").Offset(0, 1).Value2
            For m = 0 To UBound(DiffTypes)
                If InStr(FullTDType, DiffTypes(m)) > 0 Then
                    OverallTDType = DiffTypes(m)
                End If
                If InStr(ClientAccount.Offset(-1, 0), DiffTypes(m)) > 0 Then
                    PortType = DiffTypes(m)
                End If
            Next m
            
            If OverallTDType <> vbNullString Then 'If TDType is null then it's probably an individual account, but
                                           'not 100% sure yet. Skipping it for now if it's null
                Do While OverallTDType <> PortType
                    Set ClientAccount = Portfolio.UsedRange.Find("Acct # xxx-xxx" & LastThree, After:=ClientAccount)
                Loop
            End If
        
            'Find paste point
            Dim YellowCell As Range
            
            Set YellowCell = ClientAccount
            Do While YellowCell.Interior.ColorIndex <> 6
                Set YellowCell = YellowCell.Offset(0, 1)
                If YellowCell.Column = 50 Then
                    Exit Do
                End If
            Loop
            
            If YellowCell.Column = 50 Then
                    AddError " Cell with yellow background not found. Account values have not been pasted.", False
            Else
                'Paste
                Dim PastePointStart As Range
                Dim PastePointEnd As Range
                Dim PasteSize As Integer
                Dim PasteDifference As Integer
                Dim PluralString As String
                Dim RemoveLineStart As Range
                Dim RemoveLineEnd As Range
                Dim SumStart As Variant
                Dim SumEnd As Variant
                
                Set PastePointStart = YellowCell.Offset(1, 0)
                
                If PastePointStart.Offset(1, 0) = vbNullString Then
                    Set PastePointEnd = PastePointStart.Offset(0, 1)
                Else
                    Set PastePointEnd = Range(PastePointStart.End(xlDown).Offset(0, 1).Address)
                End If
            
                PasteSize = Range(PastePointStart, PastePointEnd).Rows.Count
                PasteDifference = CopySize - PasteSize
                If PasteDifference = 1 Or PasteDifference = -1 Then
                    PluralString = " position has "
                Else
                    PluralString = " positions have "
                End If
                
                If PasteDifference > 0 Then
                    AddError " Macro has been completed and account values were pasted. " & PasteDifference _
                        & PluralString & "been added.", False
                    Rows(PastePointEnd.Offset(1, -1).Row & ":" & PastePointEnd.Offset(PasteDifference, 0).Row).Insert Shift:=xlShiftDown
                ElseIf PasteDifference < 0 Then
                    AddError " Macro has been completed and account values were pasted. " & PasteDifference * -1 _
                        & PluralString & "been sold from this account.", False
                    Set RemoveLineStart = PastePointEnd.Offset(PasteDifference + 1, -1)
                    Set RemoveLineEnd = PastePointEnd
                    Range(RemoveLineStart, RemoveLineEnd).Delete Shift:=xlUp
                    If PastePointStart.Offset(1, 0) = vbNullString Then
                        Set PastePointEnd = PastePointStart.Offset(0, 1)
                    Else
                        Set PastePointEnd = Range(PastePointStart.End(xlDown).Offset(PasteDifference * -1, 1).Address)
                    End If
                End If
                
                TDSheet.Range(CopyPointStart, CopyPointEnd).Copy
                Portfolio.Paste Destination:=PastePointStart, Link:=False
                Application.CutCopyMode = False
                
                SumStart = PastePointStart.Offset(0, 1).Address
                SumEnd = PastePointEnd.Offset(PasteDifference, 0).Address
                PastePointEnd.Offset(PasteDifference + 1, 0).Formula = "=SUM(" & SumStart & ":" & SumEnd & ")"
                Range(PastePointStart, PastePointEnd).NumberFormat = "#,##0.00"
                        
                'Make sure money market matches
                Dim MoneyMarket As Range
                
                If PasteDifference > 0 Then
                    Set PastePointEnd = Range(PastePointStart.End(xlDown).Offset(0, 1).Address)
                End If
                If Range(PastePointStart, PastePointEnd).Find("MMDA12") Is Nothing Then
                    AddError " ""MMDA12"" wasn't found. Money Market amount may not be correct.", False
                Else
                    Set MoneyMarket = Range(PastePointStart, PastePointEnd).Find("MMDA12").Offset(0, 1)
                    If MoneyMarket <> CashAlt Then
                        MoneyMarket = CashAlt
                        If Not MoneyMarket.Offset(-1, 0) = vbNullString Then
                            MoneyMarket.Offset(-1, 0).Copy
                            MoneyMarket.PasteSpecial (xlPasteFormats)
                            Application.CutCopyMode = False
                        Else
                            MoneyMarket.Offset(1, 0).Copy
                            MoneyMarket.PasteSpecial (xlPasteFormats)
                            Application.CutCopyMode = False
                        End If
                    End If
                End If
                
                'Move positions next to values for Morningstar
                If InStr(Range("A1"), "Trees") = 0 And InStr(Range("A1"), "FBI") = 0 Then
                    Morningstar TDSheet, Portfolio, CopyPointStart, CopyPointEnd
                End If
            End If
        End If
    End If
End Sub
Sub CleanMiddle(TDSheet As Worksheet)
    Dim MktValStart As Range
    Dim MktValEnd As Range
    Dim PastePoint As Range
    
    If TDSheet.Cells.Find("Mkt Val", After:=Range("A1"), LookAt:=xlWhole) Is Nothing Then
        AddError " ""Mkt Val"" wasn't found. The middle section is either missing or hasn't been cleaned up.", False
        Exit Sub
    ElseIf TDSheet.Cells.Find("Symbol") Is Nothing Then
        AddError " ""Symbol"" wasn't found. The middle section is either missing or hasn't been cleaned up.", False
        Exit Sub
    End If
    
    'Move Market Value next to Symbol
    Set MktValStart = TDSheet.Cells.Find("Mkt Val", After:=Range("A1"), LookAt:=xlWhole)
    Set MktValEnd = Range(MktValStart.End(xlDown).Address)
    Set PastePoint = TDSheet.Cells.Find("Symbol").Offset(0, 1)
    Range(MktValStart, MktValEnd).Cut
    TDSheet.Paste Destination:=PastePoint, Link:=False
    Application.CutCopyMode = False
    
    'Delete Market Value %
    Dim PerMktValStart As Range
    Dim PerMktValEnd As Range
    
    If TDSheet.Cells.Find("% Mkt Val") Is Nothing Then
        AddError " ""% Mkt Val"" wasn't found. This column may need to be deleted manually.", False
    Else
        Set PerMktValStart = Cells.Find("% Mkt Val")
        Set PerMktValEnd = Range(PerMktValStart.End(xlDown).Address)
        Range(PerMktValStart, PerMktValEnd).ClearContents
    End If
End Sub
Sub DeleteLines(TDBook As Workbook, TDSheet As Worksheet)
    Dim TransType As Range
    Dim TransTypeEnd As Range
    Dim FindJNL As Range
    Dim FindTRN As Range
    Dim FindVTR As Range
    Dim Filter As Range
    Dim DeletedLines As Integer
        DeletedLines = 0
        
    If TDSheet.Cells.Find("Trans Type", After:=Range("A1")) Is Nothing Then
        AddError " ""Trans Type"" not found. Transactions have not been sorted.", False
        Exit Sub
    End If
    
    Set TransType = TDSheet.Cells.Find("Trans Type", After:=Range("A1"))
    Set TransTypeEnd = TDSheet.Range(TransType.End(xlDown).Address)
    Set FindJNL = TDSheet.Range(TransType, TransTypeEnd).Find("JNL", After:=TransType)
    Set FindTRN = TDSheet.Range(TransType, TransTypeEnd).Find("TRN", After:=TransType)
    Set FindVTR = TDSheet.Range(TransType, TransTypeEnd).Find("VTR", After:=TransType)
    
    If Not FindJNL Is Nothing Or Not FindTRN Is Nothing Or Not FindVTR Is Nothing Then
        Set Filter = TransType.Offset(2, 0)
        If Not Filter Is Nothing Then
            Do While Filter.Offset(-1, 0) <> vbNullString
                If Filter.Offset(-1, 0).Value2 = "BUY" Or _
                    Filter.Offset(-1, 0).Value2 = "DIV" Or _
                    Filter.Offset(-1, 0).Value2 = "TRD" Or _
                    Filter.Offset(-1, 0).Value2 = "SELL" Or _
                    Filter.Offset(-1, 0).Value2 = "DVIO" Then
                        Filter.Offset(-1, 0).EntireRow.Delete
                        Set Filter = Filter.Offset(1, 0)
                        DeletedLines = DeletedLines + 1
                Else
                    Set Filter = Filter.Offset(1, 0)
                End If
            Loop
        End If
    End If
    
    'Sort transactions
    Dim SortStart As Range
    Dim SortEnd As Range
    Dim AmountStart As Range
    Dim AmountEnd As Range
    Dim AmountCount As Integer
    Dim FirstVTR As String
    Dim VTRLoc As Range
    Dim Descriptor As Variant
    Dim FeeLoc As Range
    Dim PosCount As Integer
    Dim NegCount As Integer
    Dim TransLength As Integer
    Dim k As Integer
    
    If TransType.Offset(1, 0).Value2 = vbNullString Then
    ElseIf TDSheet.UsedRange.Find("Date") Is Nothing Then
        AddError " ""Date"" not found under Account History on TD sheet. Transactions have not " _
            & "been sorted.", False
    Else
        Set TransTypeEnd = TDSheet.Range(TransType.End(xlDown).Address)
        TransLength = TDSheet.Range(TransType.Offset(1, 0), TransTypeEnd).Rows.Count
        Set SortStart = TDSheet.UsedRange.Find("Date").Offset(1, 0)
        Set SortEnd = TDSheet.Range(SortStart.Offset(-1, 0).End(xlToRight).Offset(TransLength, 0).Address)
        
        TDSheet.Sort.SortFields.Clear
        TDSheet.Sort.SortFields.Add _
            Key:=Range(TransType.Offset(1, 0), TransTypeEnd), SortOn:=xlSortOnValues, Order:=xlAscending, _
            DataOption:=xlSortNormal
        With TDSheet.Sort
            .SetRange Range(SortStart, SortEnd)
            .Header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
        
        If DeletedLines > 0 And TransLength > 1 Then
            'Separate VTRs from other transactions
            If Not FindVTR Is Nothing Then
                Set VTRLoc = TDSheet.Range(TransType, TransTypeEnd).Find("VTR", After:=TransType)
                FirstVTR = VTRLoc.Address
                Do
                    Set VTRLoc = TDSheet.Range(TransType, TransTypeEnd).Find("VTR", After:=VTRLoc)
                    VTRLoc.Offset(0, 2) = VTRLoc.Offset(0, 3).Value2
                    VTRLoc.Offset(0, 3).ClearContents
                Loop While VTRLoc.Address <> FirstVTR
            End If

            'Separate fees from other transactions
            For Each Descriptor In Range(TransType.Offset(0, -2), TransTypeEnd.Offset(0, -2))
                If InStr(Descriptor, "FEE") Or InStr(Descriptor, "Fee") > 0 Then
                    Set FeeLoc = Descriptor
                    FeeLoc.Offset(0, 4) = FeeLoc.Offset(0, 5).Value
                    FeeLoc.Offset(0, 5).ClearContents
                End If
            Next Descriptor
            
            Set AmountStart = TransType.Offset(1, 3)
            Set AmountEnd = TransTypeEnd.Offset(0, 3)
            
            PosCount = Application.WorksheetFunction.CountIf(Range(AmountStart, AmountEnd), ">0")
            NegCount = Application.WorksheetFunction.CountIf(Range(AmountStart, AmountEnd), "<0")
            
            If PosCount > 0 And NegCount > 0 Then
                For k = 0 To Range(AmountStart, AmountEnd).Rows.Count
                    If AmountStart.Offset(k, 0).Value2 > 0 Then
                        AmountStart.Offset(k, 1) = AmountStart.Offset(k, 0).Value2
                        AmountStart.Offset(k, 0).ClearContents
                    End If
                Next k
                AmountEnd.Offset(1, 1).Formula = "=SUM(" & AmountStart.Offset(0, 1).Address & ":" & AmountEnd.Offset(0, 1).Address & ")"
                    With AmountEnd.Offset(1, 1).Borders(xlEdgeTop)
                        .LineStyle = xlContinuous
                        .Weight = xlThin
                        .ColorIndex = xlAutomatic
                    End With
            End If
            
            AmountCount = Application.WorksheetFunction.Count(Range(AmountStart, AmountEnd))
            
            'Add sums below transactions
            If AmountCount > 1 Then
                AmountEnd.Offset(1, 0).Formula = "=SUM(" & AmountStart.Address & ":" & AmountEnd.Address & ")"
                With AmountEnd.Offset(1, 0).Borders(xlEdgeTop)
                    .LineStyle = xlContinuous
                    .Weight = xlThin
                    .ColorIndex = xlAutomatic
                End With
            End If
            
            TDSheet.Range(TransType.Offset(1, 1), TransTypeEnd.Offset(0, 1)).NumberFormat = "#,##0.00"
            TDSheet.Range(TransType.Offset(1, 2), TransTypeEnd.Offset(1, 3)).NumberFormat = "$#,##0.00_);[Red]($#,##0.00)"
        End If
    End If
    
    If DeletedLines > 0 Then
        TDSheet.PageSetup.FitToPagesTall = 1
    End If
End Sub
Sub Morningstar(TDSheet As Worksheet, Portfolio As Worksheet, CopyPointStart As Range, CopyPointEnd As Range)
    Dim DupeStart As Range
    Dim DupeCheck As String
    Dim TextFile As Integer
    Dim TickerPath As String
    Dim TickerList As String
    Dim Symbol As Variant
    Dim n As Integer
    Static MStarTickers() As String
    Dim Ticker As Variant
    Dim DupeEnd As Range

    Set DupeStart = Portfolio.Range("M7")
    DupeCheck = "M200"
    
    Do
        Set DupeStart = DupeStart.Offset(1, 0)
        If DupeStart.Address = DupeCheck Then
            Exit Do
        End If
    Loop While DupeStart.Value2 <> vbNullString
    
    TextFile = FreeFile
    TickerPath = "Z:\YungwirthSteve\Macros\Documents\StockTickers.txt"

    Open TickerPath For Input As TextFile
        TickerList = Input(LOF(TextFile), TextFile)
    Close TextFile

    For Each Symbol In Range(CopyPointStart, CopyPointEnd.Offset(0, -1))
        For n = 0 To UBound(MStarTickers)
            If InStr(MStarTickers(n), Symbol) = 0 And InStr(TickerList, Symbol) = 0 And Symbol <> "MMDA12" Then
                MStarTickers(n) = Symbol
            End If
        Next n
    Next Symbol
    
    For Each Ticker In MStarTickers
        DupeStart.Offset(Ticker, 0) = MStarTickers(Ticker)
    Next Ticker
    
    Set DupeEnd = Range(DupeStart.End(xlDown).Address)

    With Portfolio.Sort
    .SortFields.Clear
        .SortFields.Add Key:=DupeStart, SortOn:=xlSortOnValues, Order:=xlAscending, _
            DataOption:=xlSortNormal
        .SetRange Range(DupeStart, DupeEnd)
        .Header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub
Sub SetupPages(TDBook As Workbook, TDSheet As Worksheet, Optional ClientBook As Workbook)
    Dim ColNum As Integer
    
    If Not ClientBook Is Nothing Then
        ClientBook.Activate
        With ActiveWindow
            .Top = 2.25
            .Left = 2.25
            .Width = 845.25
            .Height = 669
        End With
    End If
    
    'Set column widths
    TDBook.Activate
    Columns("A:A").ColumnWidth = 13.57
    Columns("B:B").ColumnWidth = 13.57
    For ColNum = 3 To 7
        Columns(ColNum).EntireColumn.AutoFit
    Next ColNum
    Columns("D:D").ColumnWidth = 13.57
    
    'Set printer to all columns on 1 page
    With TDSheet.PageSetup
        .Zoom = False
        .FitToPagesWide = 1
        If .FitToPagesTall <> 1 Then
            .FitToPagesTall = False
        End If
        .PrintErrors = xlPrintErrorsDisplayed
        .ScaleWithDocHeaderFooter = True
        .AlignMarginsHeaderFooter = True
    End With
    
    'Change window size
    'This should move the window over so everything on both sheets can be seen
    With ActiveWindow 'Want to change this from ActiveWindow to specifically TD window
        .Top = 2.25
        .Left = 848
        .Width = 592.25
        .Height = 669
    End With
End Sub

